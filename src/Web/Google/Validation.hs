module Web.Google.Validation
  (
    -- * Entrypoint
    verifyIdToken
    -- * Data types
  , UnverifiedToken
  , VerifiedToken
    -- * Error types
  , VerificationError(..)
  ) where

import           Data.Either.Combinators (maybeToRight)
import qualified Data.Map                as Map
import qualified Data.Text               as T
import qualified Web.Google.Certificates as Certs
import qualified Web.JWT                 as JWT

-- | A Google identification token that has not yet been parsed or verified.
type UnverifiedToken = T.Text
-- | A parsed and validated identification token.
-- | The inner 'JWT.VerifiedJWT' can be accessed for information about the token's identity.
type VerifiedToken = JWT.JWT JWT.VerifiedJWT

-- | Errors that can arise during identity token verification.
data VerificationError =
  -- | The identification token could not be parsed as a JWT.
  -- The contained 'Text' is the raw identification token that could not be parsed.
  InvalidIdToken T.Text
  -- | The identification token did not contain data that is guaranteed to exist in a Google JWT.
  | MalformedIdToken
  -- | The identification token's key identifier does not match any signing cerificate currently provided by Google.
  -- This may indicate that the provided token was not generated by Google.
  | MissingCertificate T.Text
  -- | The identification token failed verification against its corresponding signing cerificate.
  | VerificationFailed
  deriving (Show, Eq)

-- | Attempts to verify an identification token against a set of signing certificates.
verifyIdToken :: Certs.PemCerts -> UnverifiedToken -> Either VerificationError VerifiedToken
verifyIdToken certs token = do
  u <- maybeToRight (InvalidIdToken token) $ JWT.decode token
  k <- maybeToRight MalformedIdToken . JWT.kid . JWT.header $ u
  s <- maybeToRight (MissingCertificate k) $ Map.lookup k certs
  maybeToRight VerificationFailed $ JWT.verify s u
